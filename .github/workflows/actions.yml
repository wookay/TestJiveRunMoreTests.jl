# https://github.com/julia-actions/cache#usage
name: CI

on: [push, pull_request]

# needed to allow julia-actions/cache to delete old caches that it has created
permissions:
  actions: write
  contents: read

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: [1.11.5]         # April 14, 2025
        julia-arch: [x64]
        os: [ubuntu-latest]
        include:
          - julia-version: nightly
            os: ubuntu-latest
          - julia-version: 1.6.7        # July 20, 2022
            os: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: julia-actions/setup-julia@v1
      with:
        version: ${{ matrix.julia-version }}
    - uses: julia-actions/cache@v1
    - uses: julia-actions/julia-buildpkg@v1
  # - uses: julia-actions/julia-runtest@v1

    - name: Pkg.develop, Pkg.status
      run: |
           julia -e 'using Pkg; Pkg.develop("Jive"); Pkg.status("Jive")'

    - name: ARGS to filter the targets
      run: |
           cd test/
           echo "########### julia runtests.jl jive/runtests/testset testjive"
                julia --project=.. runtests.jl jive/runtests/testset testjive

           echo "########### julia runtests.jl testjive jive/runtests/testset"
                julia --project=.. runtests.jl testjive jive/runtests/testset

           echo "########### julia runtests.jl jive/r start=5"
                julia --project=.. runtests.jl jive/r start=5
           cd ../

    - name: runtests(; skip::Vector{String}), JIVE_SKIP
      run: |
           cd test/
           echo "########### JIVE_SKIP=Example,errors,fails,jive/onlyonce/heavy.jl,jive/__END__/included.jl,jive/__REPL__  julia runtests.jl"
                             JIVE_SKIP=Example,errors,fails,jive/onlyonce/heavy.jl,jive/__END__/included.jl,jive/__REPL__  julia --project=.. runtests.jl
           cd ../

    - name: expect_failures
      run: |
           julia -e 'using Pkg; Pkg.develop("Jive"); Pkg.status("Jive")'
           cd test/
           make expect_failures
           cd ../

    - name: runtests(; failfast::Bool), JULIA_TEST_FAILFAST
      run: |
           julia -e 'using Pkg; Pkg.develop("Jive"); Pkg.status("Jive")'
           cd test/
           echo "########### runtests(; failfast=true)"
                                 julia -e 'using Jive; runtests(@__DIR__, targets="fails", failfast=true)'  && echo "游뚿 success" || echo "游릭 failure"

           echo "########### JULIA_TESTntests(; )"
           JULIA_TEST_FAILFAST=1 julia -e 'using Jive; runtests(@__DIR__, targets="fails")'                 && echo "游뚿 success" || echo "游릭 failure"

           echo "########### JULIA_TESTntests(; failfast=true) # override by JULIA_TEST_FAILFAST"
           JULIA_TEST_FAILFAST=0 julia -e 'using Jive; runtests(@__DIR__, targets="fails", failfast=true)'  && echo "游뚿 success" || echo "游릭 failure"

           echo "########### runtests(;false (default)"
                                 julia -e 'using Jive; runtests(@__DIR__, targets="fails")'                 && echo "游뚿 success" || echo "游릭 failure"

           echo "########### runtests(;)"
                                 julia -e 'using Jive; runtests(@__DIR__, targets="errors", failfast=true)' && echo "游뚿 success" || echo "游릭 failure"
           cd ../

    - name: using Revise
      run: |
           cd test/Example/test/
           julia --project=.. -e 'using Pkg; Pkg.add("Revise"); Pkg.add("Jive"); Pkg.activate("..")'
           julia --project=.. -e 'p1 = @async include("revise.jl"); Timer(3) do t; touch("example/test3.jl"); sleep(0.5); rm("example/test3.jl"); sleep(1); exit(0); end; wait(p1)' example
           cd ../../../

    - name: runtests(; enable_distributed::Bool), JIVE_PROCS
      if: ${{ matrix.julia-version != '1.6.7' }}
      run: |
           julia --project=. -e 'using Pkg; Pkg.status("Jive")'
           cd test/
           echo "########### julia -pauto runtests.jl"
                           julia --project=.. -pauto -e 'using Jive; runtests(@__DIR__, targets=["test"])'

           echo "########### julia -pauto runtests(; enable_distributed=false)"
                           julia --project=.. -pauto -e 'using Jive; runtests(@__DIR__, targets=["test"], enable_distributed=false)'

           echo "########### JIVE_PROCS=auto julia runtests.jl"
           JIVE_PROCS=auto julia --project=..        -e 'using Pkg; Pkg.test(; test_args=["test"])'

           echo "########### JIVE_PROCS=0 julia -pauto runtests.jl"
           JIVE_PROCS=0    julia --project=.. -pauto -e 'using Pkg; Pkg.test(; test_args=["test"])'
           cd ../
